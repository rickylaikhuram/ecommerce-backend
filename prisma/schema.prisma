generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String         @unique
  password      String
  salt          String
  isAdmin       Boolean        @default(false)
  isDeleted     Boolean        @default(false) // Soft delete
  deletedAt     DateTime? // Track when deleted
  createdAt     DateTime       @default(now())
  wishlistItems WishlistItem[]
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // Self-referencing relationship
  parentId String? // Nullable - if null, it's a top-level category
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  // sub category image
  imageUrl String?
  altText  String?

  products Product[]
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String
  discountedPrice Decimal
  originalPrice   Decimal
  isActive        Boolean        @default(true)
  isDeleted       Boolean        @default(false) // Soft delete
  deletedAt       DateTime? // Track when deleted
  images          ProductImage[]
  totalSales      Int            @default(0)
  views           Int            @default(0)
  createdAt       DateTime       @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  productSizes ProductStock[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistedBy WishlistItem[]
}

model ProductImage {
  id        String  @id @default(uuid())
  imageUrl  String
  altText   String?
  position  Int?
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductStock {
  id        String @id @default(uuid())
  productId String
  stockName String
  stock     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, stockName])
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  userId    String
  stockName String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, stockName])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Address {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Address details
  fullName       String
  phone          String
  alternatePhone String?
  line1          String
  line2          String?
  landmark       String?
  city           String
  state          String
  country        String
  zipCode        String

  // Address metadata
  label     String? // e.g., "Home", "Office", "Mom's House"
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String?
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  // Customer info snapshot
  customerName  String
  customerEmail String
  customerPhone String

  // Shipping address snapshot
  shippingFullName String
  shippingPhone    String // Shipping contact phone
  shippingLine1    String
  shippingLine2    String?
  shippingCity     String
  shippingState    String
  shippingCountry  String
  shippingZipCode  String

  // Relations
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String? // Nullable in case product is deleted
  stockName String
  quantity  Int
  price     Decimal // Price at time of purchase

  // Product info snapshot at time of order
  productName        String // Store product name
  productDescription String? // Store product description
  productImageUrl    String? // Store main product image
  productCategory    String? // Store category name

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Payment {
  id            String    @id @default(uuid())
  orderId       String    @unique
  method        String
  transactionId String?
  status        String
  paidAt        DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// app core funtion model

model PriceSetting {
  id                    String   @id @default(uuid())
  takeDeliveryFee       Boolean  @default(true) // Master switch for delivery fees
  checkThreshold        Boolean  @default(true) // Whether to check threshold for free delivery
  deliveryFee           Decimal  @default(0) // Delivery fee amount
  freeDeliveryThreshold Decimal  @default(0) // Minimum order for free delivery
  allowedZipCodes       String[] // Array of allowed zip codes
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Banner {
  id          String  @id @default(uuid())
  imageUrl    String
  altText     String?
  redirectUrl String
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
