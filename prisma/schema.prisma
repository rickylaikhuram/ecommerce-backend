generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String         @unique
  password      String
  salt          String
  isAdmin       Boolean        @default(false)
  isDeleted     Boolean        @default(false) // Soft delete
  deletedAt     DateTime? // Track when deleted
  createdAt     DateTime       @default(now())
  wishlistItems WishlistItem[]
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[] // New relation to reviews
  couponUsage   UserCouponUsage[] // Track coupon usage
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // Self-referencing relationship
  parentId String? // Nullable - if null, it's a top-level category
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")

  // sub category image
  imageUrl String?
  altText  String?

  products Product[]
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String
  discountedPrice Decimal
  originalPrice   Decimal
  isActive        Boolean        @default(true)
  isDeleted       Boolean        @default(false) // Soft delete
  deletedAt       DateTime? // Track when deleted
  images          ProductImage[]
  totalSales      Int            @default(0)
  views           Int            @default(0)
  averageRating   Decimal?       @default(0) @db.Decimal(3, 2) // e.g., 4.25 (max 5.00)
  totalReviews    Int            @default(0) // Cache review count
  createdAt       DateTime       @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  productSizes ProductStock[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistedBy WishlistItem[]
  reviews      Review[] // New relation to reviews

  @@index([averageRating]) // Index for sorting by rating
}

model ProductImage {
  id        String  @id @default(uuid())
  imageUrl  String
  altText   String?
  position  Int?
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductStock {
  id        String @id @default(uuid())
  productId String
  stockName String
  stock     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, stockName])
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  userId    String
  stockName String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, stockName])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Address {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Address details
  fullName       String
  phone          String
  alternatePhone String?
  line1          String
  line2          String?
  landmark       String?
  city           String
  state          String
  country        String
  zipCode        String

  // Address metadata
  label     String? // e.g., "Home", "Office", "Mom's House"
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  orderNumber String      @unique
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveryId  String?
  
  // Coupon applied to this order
  couponId       String?
  couponCode     String?    // Store code for reference
  discountAmount Decimal?   // Amount discounted

  // Customer info snapshot
  customerName  String
  customerEmail String
  customerPhone String

  // Shipping address snapshot
  shippingFullName String
  shippingPhone    String
  shippingPhone2   String?
  shippingLine1    String
  shippingLine2    String?
  shippingLandmark String?
  shippingCity     String
  shippingState    String
  shippingCountry  String
  shippingZipCode  String

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  coupon     Coupon?     @relation(fields: [couponId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  @@index([userId])
  @@index([status])
  @@index([couponId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String?
  stockName String
  quantity  Int
  price     Decimal
  subTotal  Decimal // price × quantity at order time

  // Product snapshot
  productName        String
  productDescription String?
  productImageUrl    String?
  productCategory    String?

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([orderId])
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  method        PaymentMethod
  transactionId String?
  status        PaymentStatus
  paidAt        DateTime?
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int // 1-5 stars
  title     String?
  comment   String?
  isVerifiedPurchase Boolean @default(false) // If user actually bought the product
  isApproved Boolean @default(true) // For moderation
  isDeleted  Boolean @default(false) // Soft delete
  deletedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewImages ReviewImage[]

  // Ensure one review per user per product
  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([isApproved])
}

model ReviewImage {
  id       String @id @default(uuid())
  reviewId String
  imageUrl String
  altText  String?

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

// COUPON SYSTEM

model Coupon {
  id                String       @id @default(uuid())
  code              String       @unique
  name              String?      // Display name like "SUMMER2024"
  description       String?      // "Get 20% off on summer collection"
  discountType      DiscountType // PERCENTAGE or FIXED_AMOUNT
  discountValue     Decimal      // 20 (for 20%) or 500 (for ₹500)
  minOrderAmount    Decimal?     // Minimum cart value to apply coupon
  maxDiscountAmount Decimal?     // Maximum discount (for percentage coupons)
  
  // Usage limits
  usageLimit        Int?         // Total times this coupon can be used
  usagePerUser      Int?         @default(1) // Times per user can use
  usedCount         Int          @default(0) // How many times used
  
  // Validity
  isActive          Boolean      @default(true)
  validFrom         DateTime     @default(now())
  validUntil        DateTime
  
  // Targeting (optional - if empty, applies to all)
  applicableProducts   String[]  @default([]) // Product IDs
  applicableCategories String[]  @default([]) // Category IDs
  
  // Admin info
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String?      // Admin user ID who created this
  
  // Relations
  orders            Order[]      // Orders that used this coupon
  userCouponUsage   UserCouponUsage[] // Track per-user usage
  
  @@index([code])
  @@index([isActive])
  @@index([validFrom, validUntil])
}

// Track how many times each user has used each coupon
model UserCouponUsage {
  id       String @id @default(uuid())
  userId   String
  couponId String
  usedCount Int   @default(0)
  lastUsedAt DateTime?
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  
  @@unique([userId, couponId])
  @@index([userId])
  @@index([couponId])
}

// app core function model

model PriceSetting {
  id                    String   @id @default(uuid())
  takeDeliveryFee       Boolean  @default(true) // Master switch for delivery fees
  checkThreshold        Boolean  @default(true) // Whether to check threshold for free delivery
  deliveryFee           Decimal  @default(0) // Delivery fee amount
  freeDeliveryThreshold Decimal  @default(0) // Minimum order for free delivery
  allowedZipCodes       String[] // Array of allowed zip codes
  allowedCODZipCodes    String[] // Array of allowed zip codes
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Banner {
  id          String  @id @default(uuid())
  imageUrl    String
  altText     String?
  redirectUrl String
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  UNPLACED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  UPI
  CARD
  NETBANKING
  PAYPAL
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}